name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14' # Specify the Node.js version you are using

      - name: Install dependencies
        run: npm install

      - name: Extract version
        id: get_version
        run: echo "::set-output name=version::$(jq -r .version package.json)"

      - name: Build and push production Docker image
        run: |
          VERSION=$(jq -r .version package.json)
          npm run docker:build:prod
          docker buildx build --platform linux/arm/v7 -t ${{ secrets.DOCKER_REPOSITORY_OWNER }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:${VERSION} --push -f Dockerfile .
          docker buildx build --platform linux/arm/v7 -t ${{ secrets.DOCKER_REPOSITORY_OWNER }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:latest --push -f Dockerfile .

      - name: Build and push development Docker image
        run: |
          VERSION=$(jq -r .version package.json)
          npm run docker:build:dev
          docker buildx build --platform linux/arm/v7 -t ${{ secrets.DOCKER_REPOSITORY_OWNER }}/${{ secrets.DOCKER_REPOSITORY_NAME }}-dev:${VERSION} --push -f Dockerfile.dev .
          docker buildx build --platform linux/arm/v7 -t ${{ secrets.DOCKER_REPOSITORY_OWNER }}/${{ secrets.DOCKER_REPOSITORY_NAME }}-dev:latest --push -f Dockerfile.dev .
